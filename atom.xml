<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>smallstrong&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.smallstrong.site/"/>
  <updated>2018-11-11T10:45:15.306Z</updated>
  <id>http://www.smallstrong.site/</id>
  
  <author>
    <name>Small Strong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Linux】 脚本管理进程</title>
    <link href="http://www.smallstrong.site/2018/11/11/%E3%80%90Linux%E3%80%91%E8%84%9A%E6%9C%AC%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/"/>
    <id>http://www.smallstrong.site/2018/11/11/【Linux】脚本管理进程/</id>
    <published>2018-11-11T10:40:26.000Z</published>
    <updated>2018-11-11T10:45:15.306Z</updated>
    
    <content type="html"><![CDATA[<p>/etc/init.d目录添加 uwsgi_blog文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line"># chkconfig: 2345 55 25</div><div class="line"># Description: Startup script for uwsgi webserver on Debian. Place in /etc/init.d and</div><div class="line"># run &apos;update-rc.d -f uwsgi defaults&apos;, or use the appropriate command on your</div><div class="line"># distro. For CentOS/Redhat run: &apos;chkconfig --add uwsgi&apos;</div><div class="line"></div><div class="line">### BEGIN INIT INFO</div><div class="line"># Provides:              uwsgi_blog</div><div class="line"># Required-Start:        $all</div><div class="line"># Required-Stop:          $all</div><div class="line"># Default-Start:          2 3 4 5</div><div class="line"># Default-Stop:         0 1 6</div><div class="line"># Short-Description: starts the uwsgi web server</div><div class="line"># Description:           starts uwsgi using start-stop-daemon</div><div class="line">### END INIT INFO</div><div class="line"></div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</div><div class="line">DESC=&quot;uwsgi_blog daemon&quot;</div><div class="line">NAME=uwsgi_blog</div><div class="line">DAEMON=/usr/bin/uwsgi</div><div class="line">CONFIGFILE=/home/small/api/$NAME.ini</div><div class="line">PIDFILE=/var/run/$NAME.pid                                                                                                                         </div><div class="line">SCRIPTNAME=/etc/init.d/$NAME                                                                                                                       </div><div class="line">set -e                                                                                                                           </div><div class="line">[ -x &quot;$DAEMON&quot; ] || exit 0                                                                                     </div><div class="line">do_start() &#123;         </div><div class="line"></div><div class="line">   $DAEMON $CONFIGFILE || echo -n &quot;uwsgi_blog already running&quot; </div><div class="line">   </div><div class="line">&#125;                                                                                                                                                  </div><div class="line">do_stop() &#123;                                                                                                                                        </div><div class="line">   $DAEMON --stop $PIDFILE || echo -n &quot;uwsgi_blog not running&quot;                                                                                          </div><div class="line">   rm -f $PIDFILE                                                                                                                                  </div><div class="line">   echo &quot;$DAEMON STOPED.&quot;                                                                                                                          </div><div class="line">&#125;                                                                                                                                                  </div><div class="line">                                                                        </div><div class="line">do_reload() &#123;                                                                                                                                      </div><div class="line">   $DAEMON --reload $PIDFILE || echo -n &quot;uwsgi_blog can&apos;t reload&quot;                                                                                       </div><div class="line">&#125;                                                                                                                                                  </div><div class="line">                                                                                                                                                   </div><div class="line">do_status() &#123;                                                                                                                                      </div><div class="line">   ps aux|grep $DAEMON                                                                                                                             </div><div class="line">&#125;                                                                       </div><div class="line"></div><div class="line">case &quot;$1&quot; in                                                                                                                                       </div><div class="line"> status)                                                                                                                                           </div><div class="line">   echo -en &quot;Status $NAME: \n&quot;                                                                                                                     </div><div class="line">   do_status</div><div class="line"> ;;</div><div class="line"> start)</div><div class="line">   echo -en &quot;Starting $NAME: \n&quot;</div><div class="line">   do_start</div><div class="line"> ;;</div><div class="line"> stop)</div><div class="line">   echo -en &quot;Stopping $NAME: \n&quot;</div><div class="line">   do_stop</div><div class="line"> ;;</div><div class="line"> reload|graceful)</div><div class="line">   echo -en &quot;Reloading $NAME: \n&quot;</div><div class="line">   do_reload</div><div class="line"> ;;</div><div class="line"> *)</div><div class="line">   echo &quot;Usage: $SCRIPTNAME &#123;start|stop|reload&#125;&quot; &gt;&amp;2</div><div class="line">   exit 3</div><div class="line"> ;;</div><div class="line">esac</div><div class="line"></div><div class="line">exit 0</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chkconfig --add uwsgi_blog</div><div class="line">sudo chkconfig uwsgi_blog on</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;/etc/init.d目录添加 uwsgi_blog文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="Linux" scheme="http://www.smallstrong.site/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.smallstrong.site/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【网络基础】tcp</title>
    <link href="http://www.smallstrong.site/2018/10/03/%E3%80%90%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E3%80%91tcp/"/>
    <id>http://www.smallstrong.site/2018/10/03/【网络基础】tcp/</id>
    <published>2018-10-03T02:12:15.000Z</published>
    <updated>2018-11-02T08:53:40.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于TCP协议的三次握手和四次挥手"><a href="#关于TCP协议的三次握手和四次挥手" class="headerlink" title="关于TCP协议的三次握手和四次挥手"></a>关于TCP协议的三次握手和四次挥手</h2><blockquote>
<p>tcp位于网络七层的传输层，就是这协议传数据用的。理解TCP协议的三次握手和四次挥手抓住一点，全双工！三次握手连接时候要满足两端都具有收发能力，四次挥手断开连接时要确保两端都明白对方不发了，记住是两端。</p>
</blockquote>
<h4 id="三次握手-（确保两端收发没问题即可建立连接）"><a href="#三次握手-（确保两端收发没问题即可建立连接）" class="headerlink" title="三次握手 （确保两端收发没问题即可建立连接）"></a>三次握手 （确保两端收发没问题即可建立连接）</h4><ol>
<li>Client -&gt; Service：听得到吗？ (Service收到及证明了Service具有接受能力)</li>
<li>Service -&gt; Client: 听得到！(Client收到及证明了Client发出去的消息Service收到了，那么Client的发送能力被证明，Client还收到Service的回复证明Client端自己明白了自己收发都没有问题)</li>
<li>Client -&gt; Service：OK! （Service收到Client反馈收到及证明自己上一步发出去的信息被Client确认了说明自己的发送能力没问题，那么就证明了Service收发都没有问题）</li>
</ol>
<h4 id="四次挥手-（确保两端都没有数据要传递了）"><a href="#四次挥手-（确保两端都没有数据要传递了）" class="headerlink" title="四次挥手 （确保两端都没有数据要传递了）"></a>四次挥手 （确保两端都没有数据要传递了）</h4><ol>
<li>Client -&gt; Service 我数据传完了，我这边断掉了奥 </li>
<li>Service -&gt; Client 好的，你断掉吧  （到这一步客户端传输内容中断）</li>
<li>Service -&gt; Client 我这边数据也传完了，我也要断了奥 </li>
<li>Client -&gt; Service 好的，你断掉吧  （到这一步服务端传输内容中断）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于TCP协议的三次握手和四次挥手&quot;&gt;&lt;a href=&quot;#关于TCP协议的三次握手和四次挥手&quot; class=&quot;headerlink&quot; title=&quot;关于TCP协议的三次握手和四次挥手&quot;&gt;&lt;/a&gt;关于TCP协议的三次握手和四次挥手&lt;/h2&gt;&lt;blockquote&gt;

    
    </summary>
    
      <category term="网络基础" scheme="http://www.smallstrong.site/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="net" scheme="http://www.smallstrong.site/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>【网络基础】dns</title>
    <link href="http://www.smallstrong.site/2018/10/02/%E3%80%90%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E3%80%91dns/"/>
    <id>http://www.smallstrong.site/2018/10/02/【网络基础】dns/</id>
    <published>2018-10-02T03:32:15.000Z</published>
    <updated>2018-11-02T03:34:07.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dns解析过程"><a href="#dns解析过程" class="headerlink" title="dns解析过程"></a>dns解析过程</h2><ol>
<li>浏览器缓存 例如Chrome浏览器会首先搜索浏览器自身的DNS缓存（可以使用 chrome://net-internals/#dns 来进行查看）</li>
<li>操作系统自身的DNS缓存，hosts文件</li>
<li>路由器缓存找</li>
<li>本地DNS服务器（运营商提供或者自己修改指定例如8.8.8.8是Google的dns服务器地址）</li>
<li>本地DNS会把请求发至13台根DNS，根DNS服务器收到请求后会返回负责这个域名(.net)的服务器的一个IP，本地DNS服务器使用该IP信息联系负责.net域的这台服务器。这台负责.net域的服务器收到请求后，如果自己无法解析，会返回.net域的下一级DNS服务器地址(blog.csdn.net)给本地DNS服务器。以此类推，直至找到。递归找</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;dns解析过程&quot;&gt;&lt;a href=&quot;#dns解析过程&quot; class=&quot;headerlink&quot; title=&quot;dns解析过程&quot;&gt;&lt;/a&gt;dns解析过程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;浏览器缓存 例如Chrome浏览器会首先搜索浏览器自身的DNS缓存（可以使用 chrom
    
    </summary>
    
      <category term="网络基础" scheme="http://www.smallstrong.site/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="net" scheme="http://www.smallstrong.site/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>【Mysql】mysql tips</title>
    <link href="http://www.smallstrong.site/2018/10/01/%E3%80%90Mysql%E3%80%91mysql-tips/"/>
    <id>http://www.smallstrong.site/2018/10/01/【Mysql】mysql-tips/</id>
    <published>2018-10-01T09:15:59.000Z</published>
    <updated>2018-11-01T09:18:37.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库表结构"><a href="#数据库表结构" class="headerlink" title="数据库表结构"></a>数据库表结构</h2><ol>
<li>选取合适的字段属性，原则是够用就行，能用数字做映射的尽量用数字。</li>
<li>尽量将字段设置为NOT NULL,NULL 会参与字段比较，影响效率。</li>
<li>最好为每张表加个自增id，UNSIGNED INT类型</li>
<li>存储引擎根据业务来选型</li>
</ol>
<h2 id="SQL和索引"><a href="#SQL和索引" class="headerlink" title="SQL和索引"></a>SQL和索引</h2><ol>
<li>insert语句时，同一客户端插入很多行，应该尽量使用多个值表一次性插入</li>
<li>使用JOIN来替代子查询（不需要在内存中创建临时表来）</li>
<li>为那些join 相同字段、WHERE查询、ORDERBY排序字段建立索引，在建有索引的字段上尽量不要使用函数操作，使用like和通配符时会有性能代价。当数据量较大,查询字段较多,查询方式较为复杂时候就该建立搜索库来解决问题。</li>
<li>明确知道只有一条返回时候用上 limit 1</li>
<li>limit做分页的时候想办法知道offset，然后拿后面确定的数据个数</li>
<li>select要哪些字段取哪些字段，select * 这种不图一时爽</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据库表结构&quot;&gt;&lt;a href=&quot;#数据库表结构&quot; class=&quot;headerlink&quot; title=&quot;数据库表结构&quot;&gt;&lt;/a&gt;数据库表结构&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选取合适的字段属性，原则是够用就行，能用数字做映射的尽量用数字。&lt;/li&gt;
&lt;li&gt;尽量将字段设
    
    </summary>
    
      <category term="数据库&amp;缓存" scheme="http://www.smallstrong.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="mysql" scheme="http://www.smallstrong.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】redis过期及逐出策略</title>
    <link href="http://www.smallstrong.site/2018/07/03/%E3%80%90Redis%E3%80%91redis%E8%BF%87%E6%9C%9F%E5%8F%8A%E9%80%90%E5%87%BA%E7%AD%96%E7%95%A5/"/>
    <id>http://www.smallstrong.site/2018/07/03/【Redis】redis过期及逐出策略/</id>
    <published>2018-07-03T02:47:36.000Z</published>
    <updated>2018-09-27T01:15:13.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="过期key设置"><a href="#过期key设置" class="headerlink" title="过期key设置"></a>过期key设置</h3><ol>
<li>set key value EX 60 （在set的时候设置过期时间）</li>
<li>EX key 60 (已经存在的key设置过期时间)</li>
<li>ttl (查看key过期时间)</li>
</ol>
<h3 id="过期key清理策略"><a href="#过期key清理策略" class="headerlink" title="过期key清理策略"></a>过期key清理策略</h3><ol>
<li>访问时判断key是否过期，过期则清除</li>
<li>CPU空闲时候,定期serveCron任务中，逐步删除过期key</li>
<li>每次事件循环的时候，逐出部分过期key</li>
</ol>
<h3 id="数据逐出时机"><a href="#数据逐出时机" class="headerlink" title="数据逐出时机"></a>数据逐出时机</h3><ol>
<li>volatile-lru 设置过期时间的最近最少用</li>
<li>volatile-ttl 设置过期时间的最近要过期的</li>
<li>volatile-random 设置过期时间的随机的</li>
<li>allkeys-lru 所有keylru</li>
<li>allkeys-random 所有key随机</li>
<li>no-enviction 爆出oom</li>
</ol>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ol>
<li>不要放垃圾数据，定期清理</li>
<li>尽量设置过期时间</li>
<li>单个key不要过大</li>
<li>逻辑db，每个业务划分，帮助排查和清理</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;过期key设置&quot;&gt;&lt;a href=&quot;#过期key设置&quot; class=&quot;headerlink&quot; title=&quot;过期key设置&quot;&gt;&lt;/a&gt;过期key设置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;set key value EX 60 （在set的时候设置过期时间）&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="数据库&amp;缓存" scheme="http://www.smallstrong.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="redis" scheme="http://www.smallstrong.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】redis支持的几种数据类型及命令介绍</title>
    <link href="http://www.smallstrong.site/2018/07/03/%E3%80%90Redis%E3%80%91redis%E6%94%AF%E6%8C%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.smallstrong.site/2018/07/03/【Redis】redis支持的几种数据类型及命令介绍/</id>
    <published>2018-07-03T02:41:59.000Z</published>
    <updated>2018-09-27T01:15:19.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis支的数据类型："><a href="#Redis支的数据类型：" class="headerlink" title="Redis支的数据类型："></a>Redis支的数据类型：</h3><ol>
<li>String（字符串）</li>
<li>Hash（哈希）</li>
<li>Lists（列表）</li>
<li>Sets（集合）</li>
<li>Sorted sets(有序集合)</li>
<li>HyperLogLog （基数统计）</li>
</ol>
<h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><p><a href="https://www.jb51.net/article/65241.htm" target="_blank" rel="external">https://www.jb51.net/article/65241.htm</a></p>
<h4 id="Lists（列表）"><a href="#Lists（列表）" class="headerlink" title="Lists（列表）"></a>Lists（列表）</h4><p><a href="https://www.jb51.net/article/65246.htm" target="_blank" rel="external">https://www.jb51.net/article/65246.htm</a></p>
<h4 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h4><p><a href="https://www.jb51.net/article/65250.htm" target="_blank" rel="external">https://www.jb51.net/article/65250.htm</a></p>
<h4 id="Sets（集合）"><a href="#Sets（集合）" class="headerlink" title="Sets（集合）"></a>Sets（集合）</h4><p><a href="https://www.jb51.net/article/65252.htm" target="_blank" rel="external">https://www.jb51.net/article/65252.htm</a></p>
<h4 id="Sorted-sets-有序集合"><a href="#Sorted-sets-有序集合" class="headerlink" title="Sorted sets(有序集合)"></a>Sorted sets(有序集合)</h4><p><a href="https://www.jb51.net/article/65253.htm" target="_blank" rel="external">https://www.jb51.net/article/65253.htm</a></p>
<h4 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">➜  ~ redis-cli -c -p 7000</div><div class="line">127.0.0.1:7000&gt; pfadd www 1</div><div class="line">-&gt; Redirected to slot [550] located at 127.0.0.1:7004</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:7004&gt; pfadd www 2</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:7004&gt; pfadd www 3</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:7004&gt; pfadd www 4</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:7004&gt; pfadd www 5</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:7004&gt; pfadd www 1</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:7004&gt; pfadd www 0</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:7004&gt; pfadd www 2</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:7004&gt; pfcount www</div><div class="line">(integer) 6</div><div class="line">127.0.0.1:7004&gt; pfadd www 23 44 55</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:7004&gt; pfcount www</div><div class="line">(integer) 9</div><div class="line">127.0.0.1:7004&gt;</div><div class="line"></div><div class="line">PFMERGE 将多个 HyperLogLog 合并为一个 HyperLogLog，但两个key在不同节点的HyperLogLog合并会失败，个人觉得是个挺鸡肋的功能。（(error) CROSSSLOT Keys in request don&apos;t hash to the same slot）</div><div class="line"></div><div class="line">这个功能用来算日活，点击计数之类的再好不过，内存开销非常少，前提是不需要知道具体内容只算数字。</div></pre></td></tr></table></figure>
<h4 id="redis命令"><a href="#redis命令" class="headerlink" title="redis命令"></a>redis命令</h4><p><a href="https://redis.io/commands" target="_blank" rel="external">https://redis.io/commands</a></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote>
<p>以上所有链接</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Redis支的数据类型：&quot;&gt;&lt;a href=&quot;#Redis支的数据类型：&quot; class=&quot;headerlink&quot; title=&quot;Redis支的数据类型：&quot;&gt;&lt;/a&gt;Redis支的数据类型：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;String（字符串）&lt;/li&gt;
&lt;li&gt;Has
    
    </summary>
    
      <category term="数据库&amp;缓存" scheme="http://www.smallstrong.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="redis" scheme="http://www.smallstrong.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】Mac上redis安装启动及数据可视化</title>
    <link href="http://www.smallstrong.site/2018/07/02/%E3%80%90Redis%E3%80%91Mac%E4%B8%8Aredis%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://www.smallstrong.site/2018/07/02/【Redis】Mac上redis安装启动及数据可视化/</id>
    <published>2018-07-02T12:00:59.000Z</published>
    <updated>2018-09-27T01:14:42.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Homebrew安装redis"><a href="#使用Homebrew安装redis" class="headerlink" title="使用Homebrew安装redis"></a>使用Homebrew安装redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">brew install redis</div><div class="line">## 启动redis服务端</div><div class="line">redis-server /usr/local/etc/redis.conf  （redis.conf是Redis的配置文件）</div><div class="line">## 进入redis客户端</div><div class="line">redis-cli</div></pre></td></tr></table></figure>
<h2 id="可视化工具rdm下载"><a href="#可视化工具rdm下载" class="headerlink" title="可视化工具rdm下载"></a>可视化工具rdm下载</h2><p><a href="https://www.smallstrong.site/resources/rdm.app.zip">https://www.smallstrong.site/resources/rdm.app.zip</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/pingpangbing0902/article/details/47104545" target="_blank" rel="external">https://blog.csdn.net/pingpangbing0902/article/details/47104545</a></p>
<p><a href="http://doc.redisfans.com/" target="_blank" rel="external">http://doc.redisfans.com/</a></p>
<p><a href="https://www.jb51.net/article/56448.htm" target="_blank" rel="external">https://www.jb51.net/article/56448.htm</a></p>
<p><strong>redis.conf 配置详解：</strong><a href="https://blog.csdn.net/ithomer/article/details/9232891" target="_blank" rel="external">https://blog.csdn.net/ithomer/article/details/9232891</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用Homebrew安装redis&quot;&gt;&lt;a href=&quot;#使用Homebrew安装redis&quot; class=&quot;headerlink&quot; title=&quot;使用Homebrew安装redis&quot;&gt;&lt;/a&gt;使用Homebrew安装redis&lt;/h2&gt;&lt;figure class
    
    </summary>
    
      <category term="数据库&amp;缓存" scheme="http://www.smallstrong.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="redis" scheme="http://www.smallstrong.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Ansible的简单使用</title>
    <link href="http://www.smallstrong.site/2018/04/11/Ansible%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.smallstrong.site/2018/04/11/Ansible的简单使用/</id>
    <published>2018-04-11T03:16:36.000Z</published>
    <updated>2018-09-27T01:45:52.707Z</updated>
    
    <content type="html"><![CDATA[<center> Ansible的简单使用 </center>

<h1 id="Ansible简单使用"><a href="#Ansible简单使用" class="headerlink" title="Ansible简单使用"></a>Ansible简单使用</h1><blockquote>
<p>ansible可以给我带来什么，为什么要学习ansible？这是我学习ansible的第一个问题。现阶段我认为ansible是个运维工具，可以帮你在本地电脑批量执行一些服务器的命令操作，这些命令可能是一次性的包安装命令，也可以是一些你经常用到的代码部署重启服务的命令。结合业务定制化的写一些playbook程序，从而减轻一些重复劳动。</p>
<p>该笔记意在帮助初学者最快最直接的方式了解ansible的流程，如果想进一步学习推荐访问<br><a href="http://ansible-tran.readthedocs.io/en/latest/index.html" target="_blank" rel="external">Ansible中文权威指南</a></p>
</blockquote>
<h3 id="Ansible在Mac上的安装"><a href="#Ansible在Mac上的安装" class="headerlink" title="Ansible在Mac上的安装"></a>Ansible在Mac上的安装</h3><blockquote>
<p>使用brew安装ansible<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ansible</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="ssh免密登陆"><a href="#ssh免密登陆" class="headerlink" title="ssh免密登陆"></a>ssh免密登陆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. 在用户目录下创建 /.ssh/authorized_keys文件</div><div class="line">2. 添加你的ssh公钥到该文件</div><div class="line">3. 该文件的访问权限为600 （sudo chmod 600 authorized_keys）</div><div class="line">4. ssh免密登陆 （例：ssh small@smallstrong.site）</div></pre></td></tr></table></figure>
<h3 id="创建ansible项目（目录如下图）"><a href="#创建ansible项目（目录如下图）" class="headerlink" title="创建ansible项目（目录如下图）"></a>创建ansible项目（目录如下图）</h3><p><img src="https://upload-images.jianshu.io/upload_images/1321838-db72bc0056c14275.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ansible.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ansible.cfg # ansible的配置文件 </div><div class="line">fanfan.yml # 运行脚本的入口文件</div><div class="line">hosts # 填写服务器信息的文件</div><div class="line">group_vars/ # 放置全局参数的文件夹</div><div class="line">roles/fanfan_web # fanfan项目的所有执行文件放置的目录</div><div class="line">roles/fanfan_web/tasks # 具体执行的任务</div><div class="line">roles/fanfan_web/handlers # 一般是具体执行一些操作之后重启服务的任务</div><div class="line">roles/fanfan_web/files # 一些可能你要上传到服务器的代码</div><div class="line">roles/fanfan_web/templates # 我暂时没用到~~</div></pre></td></tr></table></figure>
<p><a href="https://github.com/ansible/ansible-examples" target="_blank" rel="external">官方的demo链接</a></p>
<h3 id="hosts主机配置"><a href="#hosts主机配置" class="headerlink" title="hosts主机配置"></a>hosts主机配置</h3><ol>
<li><p>打开host文件，写入你服务器信息 （以下是我的例子）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[small]  # 组</div><div class="line">www.smallstrong.site        ansible_connection=ssh        ansible_ssh_user=small</div></pre></td></tr></table></figure>
</li>
<li><p>打开ansible.cfg文件 将inventory这项配置路径修改成上面host的路径（以下是我的例子）</p>
<blockquote>
<p>inventory      = /Users/smallstrong/Desktop/fanfan/beichoo-b/beichoo-api/devops/hosts</p>
</blockquote>
</li>
</ol>
<h3 id="开撸playbook-（一个我应用自动化部署的例子）"><a href="#开撸playbook-（一个我应用自动化部署的例子）" class="headerlink" title="开撸playbook （一个我应用自动化部署的例子）"></a>开撸playbook （一个我应用自动化部署的例子）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- hosts: small  # 该脚本执行对象是small这个服务器组</div><div class="line">  gather_facts: no # 不每次都去获取服务器基本信息加快速度</div><div class="line">  roles:</div><div class="line">    - fanfan_web # 执行roles目录下fanfan_web目录下的文件</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: pull origin code</div><div class="line">  shell: sh /应用代码路径/publish.sh # 这是一个git拉代码的脚本</div><div class="line">  notify: reload uwsgi # 代码拉完之后重启uwsgi进程</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># uwsgi进程重启</div><div class="line">---</div><div class="line">- name: reload uwsgi</div><div class="line">  command: sudo service uwsgi reload</div></pre></td></tr></table></figure>
<blockquote>
<p>执行程序 (fanfan.yml那个路径下执行)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook fanfan.yml</div></pre></td></tr></table></figure>
<h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><h5 id="ansible其实还有很多想象空间，这里我只是简单的做了一个代码部署，期待更多的骚操作。"><a href="#ansible其实还有很多想象空间，这里我只是简单的做了一个代码部署，期待更多的骚操作。" class="headerlink" title="ansible其实还有很多想象空间，这里我只是简单的做了一个代码部署，期待更多的骚操作。"></a>ansible其实还有很多想象空间，这里我只是简单的做了一个代码部署，期待更多的骚操作。</h5>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; Ansible的简单使用 &lt;/center&gt;

&lt;h1 id=&quot;Ansible简单使用&quot;&gt;&lt;a href=&quot;#Ansible简单使用&quot; class=&quot;headerlink&quot; title=&quot;Ansible简单使用&quot;&gt;&lt;/a&gt;Ansible简单使用&lt;/h1&gt;&lt;blo
    
    </summary>
    
      <category term="Devops" scheme="http://www.smallstrong.site/categories/Devops/"/>
    
    
      <category term="devops" scheme="http://www.smallstrong.site/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Docker 指令学习.md</title>
    <link href="http://www.smallstrong.site/2018/03/28/Docker-%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.smallstrong.site/2018/03/28/Docker-指令学习/</id>
    <published>2018-03-28T15:16:36.000Z</published>
    <updated>2018-09-27T01:46:03.859Z</updated>
    
    <content type="html"><![CDATA[<center>Docker 指令学习</center>

<h2 id="Docker环境信息"><a href="#Docker环境信息" class="headerlink" title="Docker环境信息"></a>Docker环境信息</h2><h3 id="docker-info"><a href="#docker-info" class="headerlink" title="docker info"></a>docker info</h3><blockquote>
<p>docker info命令用于检查Docker是否安装。如果安装了，会显示docker信息。</p>
</blockquote>
<h3 id="docker-version"><a href="#docker-version" class="headerlink" title="docker version"></a>docker version</h3><blockquote>
<p>docker version命令获取docker版本信息</p>
</blockquote>
<hr>
<h2 id="容器生命周期管理"><a href="#容器生命周期管理" class="headerlink" title="容器生命周期管理"></a>容器生命周期管理</h2><blockquote>
<p>容器生命周期管理涉及到容器的启动、停止功能。</p>
</blockquote>
<h3 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h3><blockquote>
<p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p>
<p>docker run -it –name test(容器取名) ece50e7f3b34(镜像名称) 由镜像新建一个容器</p>
</blockquote>
<h3 id="docker-start-stop-restart"><a href="#docker-start-stop-restart" class="headerlink" title="docker start/stop/restart"></a>docker start/stop/restart</h3><blockquote>
<p>docker stop/stop/restart [OPTIONS] CONTAINER [CONTAINER…]</p>
<p>docker start -ai 3549fa1e6c8e(容器ID) </p>
</blockquote>
<hr>
<h2 id="镜像仓库命令"><a href="#镜像仓库命令" class="headerlink" title="镜像仓库命令"></a>镜像仓库命令</h2><blockquote>
<p>docker镜像的搜索、下载和上传相关操作</p>
</blockquote>
<h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><blockquote>
<p>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</p>
<p>docker pull ubuntu12.04 or docker pull 12.33.44.532:8888/test 可以从官方下载也可以指定服务器地址获取镜像</p>
</blockquote>
<h3 id="docker-push"><a href="#docker-push" class="headerlink" title="docker push"></a>docker push</h3><blockquote>
<p>docker push [OPTIONS] NAME[:TAG]</p>
</blockquote>
<hr>
<h2 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h2><blockquote>
<p>对本地镜像进行管理</p>
</blockquote>
<h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><blockquote>
<p>docker images 列出本地所有镜像</p>
</blockquote>
<h3 id="docker-rmi-OPTIONS-IMAGE-IMAGE…"><a href="#docker-rmi-OPTIONS-IMAGE-IMAGE…" class="headerlink" title="docker rmi [OPTIONS] IMAGE [IMAGE…]"></a>docker rmi [OPTIONS] IMAGE [IMAGE…]</h3><blockquote>
<p>docker rmi 3549fa1e6c8e(镜像ID) </p>
</blockquote>
<h3 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h3><blockquote>
<p>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]] (不推荐) 只做特定镜像</p>
</blockquote>
<h3 id="docker-build"><a href="#docker-build" class="headerlink" title="docker build"></a>docker build</h3><blockquote>
<p>docker build -t app:v0.01 . (根据当前目录的Dockerfile来构建镜像)</p>
</blockquote>
<hr>
<h2 id="容器运维操作"><a href="#容器运维操作" class="headerlink" title="容器运维操作"></a>容器运维操作</h2><h3 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h3><blockquote>
<p>docker attach [OPTIONS] CONTAINER 连接到正在运行的容器</p>
</blockquote>
<h3 id="docker-inspect"><a href="#docker-inspect" class="headerlink" title="docker inspect"></a>docker inspect</h3><blockquote>
<p>docker inspect [OPTIONS] NAME|ID [NAME|ID…] 传入容器或者镜像ID会列出详细信息</p>
</blockquote>
<h3 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h3><blockquote>
<p>docker ps -a 列出所有容器 可用来查看容器id</p>
</blockquote>
<h3 id="docker-rm-OPTIONS-CONTAINER-CONTAINER…"><a href="#docker-rm-OPTIONS-CONTAINER-CONTAINER…" class="headerlink" title="docker rm [OPTIONS] CONTAINER [CONTAINER…]"></a>docker rm [OPTIONS] CONTAINER [CONTAINER…]</h3><blockquote>
<p>docker rm 3549fa1e6c8e(容器ID) </p>
</blockquote>
<h3 id="docker-events"><a href="#docker-events" class="headerlink" title="docker events"></a>docker events</h3><blockquote>
<p>docker events 会打印出实时的系统事件</p>
</blockquote>
<h3 id="docker-history"><a href="#docker-history" class="headerlink" title="docker history"></a>docker history</h3><blockquote>
<p>docker history ece50e7f3b34(Image Id) 镜像构建的日志</p>
</blockquote>
<h3 id="docker-logs"><a href="#docker-logs" class="headerlink" title="docker logs"></a>docker logs</h3><blockquote>
<p>docker logs 4b9b94068c06 容器进程的日志</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;Docker 指令学习&lt;/center&gt;

&lt;h2 id=&quot;Docker环境信息&quot;&gt;&lt;a href=&quot;#Docker环境信息&quot; class=&quot;headerlink&quot; title=&quot;Docker环境信息&quot;&gt;&lt;/a&gt;Docker环境信息&lt;/h2&gt;&lt;h3 id=&quot;doc
    
    </summary>
    
      <category term="Devops" scheme="http://www.smallstrong.site/categories/Devops/"/>
    
    
  </entry>
  
  <entry>
    <title>Scrapy的项目结构介绍</title>
    <link href="http://www.smallstrong.site/2018/01/23/Scrapy%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.smallstrong.site/2018/01/23/Scrapy的项目结构介绍/</id>
    <published>2018-01-23T05:39:47.000Z</published>
    <updated>2018-09-27T17:32:26.812Z</updated>
    
    <content type="html"><![CDATA[<center> Scrapy的项目结构介绍 </center>

<h3 id="创建scrapy爬虫项目"><a href="#创建scrapy爬虫项目" class="headerlink" title="创建scrapy爬虫项目"></a>创建scrapy爬虫项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy startproject taotie</div></pre></td></tr></table></figure>
<p><img src="/images/scrapy_init.png" alt="scrapy_init"></p>
<blockquote>
<p>tip 先切到venv3环境</p>
</blockquote>
<hr>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="/images/scrapy_tree.png" alt="scrapy_tree"></p>
<h4 id="scrapy-cfg文件"><a href="#scrapy-cfg文件" class="headerlink" title="scrapy.cfg文件"></a>scrapy.cfg文件</h4><p>存放的目录被认为是项目的根目录。该文件中包含 python模块名的字段定义了项目的设置。一般不用改动。</p>
<h4 id="items-py-文件"><a href="#items-py-文件" class="headerlink" title="items.py 文件"></a>items.py 文件</h4><p>该文件中包含了scrapy数据容器模型代码。Item 对象是种简单的容器，保存了爬取到得数据。类似Java中的Bean类。</p>
<p>定义要爬取数据的字段，丢进Item对象之中。</p>
<h4 id="middlewares-py-文件"><a href="#middlewares-py-文件" class="headerlink" title="middlewares.py 文件"></a>middlewares.py 文件</h4><p>该文件中包含下载器中间件和爬虫中间件模型代码。</p>
<p>下载器中间件是介于 Scrapy 的request/response 处理的钩子框架。是用于全局修改 Scrapy request 和 response的一个轻量、底层的系统。</p>
<p>爬虫中间件是介入到 Scrapy 的 spider 处理机制的钩子框架，您可以添加代码来处理发送给 Spiders 的 response 及 spider 产生的 item 和 发出request。</p>
<h4 id="pipelines-py-文件"><a href="#pipelines-py-文件" class="headerlink" title="pipelines.py 文件"></a>pipelines.py 文件</h4><p>每个管道组件是实现了简单方法的 Python 类。他们接收到 Item 并通过它执行一些行为，同时也决定此 Item 是否继续通过后续的管道组件，或是被丢弃而不再进行处理。</p>
<p>对收集到的Item进行进一步处理，不符合可以pass掉。</p>
<h4 id="settings-py-文件"><a href="#settings-py-文件" class="headerlink" title="settings.py 文件"></a>settings.py 文件</h4><p>Scrapy 设定(settings)提供了定制 Scrapy 组件的方法。您可以控制包括核心(core)，插件(extension)，pipeline 及 spider 组件。功能配置都在这里，功能解耦真心服。</p>
<h4 id="spiders-文件夹"><a href="#spiders-文件夹" class="headerlink" title="spiders  文件夹"></a>spiders  文件夹</h4><p>具体爬虫代码都在这里，Spider是用户编写用于从单个网站(或者一些网站)爬取数据的类。为了创建一个 Spider，您必须继承 scrapy.Spider 类。</p>
<h5 id="类中要做三件事情："><a href="#类中要做三件事情：" class="headerlink" title="类中要做三件事情："></a>类中要做三件事情：</h5><ol>
<li>给爬虫名字命名</li>
<li>定义要爬取的URL</li>
<li>爬去下来的数据会回调parse方法进行数据解析（Important）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"># @Time    : 2018/1/23 下午3:00</div><div class="line"># @Author  : SmallStrong</div><div class="line"># @Des     :</div><div class="line"># @File    : taotie.py</div><div class="line"># @Software: PyCharm</div><div class="line"></div><div class="line"></div><div class="line">from scrapy.spiders import Spider</div><div class="line">from taotie.items import TaotieItem</div><div class="line">from scrapy import Request</div><div class="line"></div><div class="line"></div><div class="line">class Taotie(Spider):</div><div class="line">    name = &apos;taotie&apos; # 爬虫名称</div><div class="line">    headers = &#123;</div><div class="line">        &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/&apos;</div><div class="line">                      &apos;537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safar&apos;</div><div class="line">                      &apos;i/537.36&apos;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    def start_requests(self): # 爬取的链接</div><div class="line">        url = &apos;https://www.xiachufang.com/category/&apos;</div><div class="line">        yield Request(url, headers=self.headers)</div><div class="line"></div><div class="line">    def parse(self, response): # 数据进行解析</div><div class="line">        categorys = response.xpath(&apos;/html/body/div[3]/div/div/div/div&apos;)</div><div class="line">        for item in categorys:</div><div class="line">            foods = item.xpath(&apos;.//div[3]/ul&apos;)</div><div class="line">            for food in foods:</div><div class="line">                keys = food.xpath(&apos;.//li/a&apos;)</div><div class="line">                for key in keys:</div><div class="line">                    try:</div><div class="line">                        item = TaotieItem()</div><div class="line">                        item[&apos;category_id&apos;] = key.xpath(&apos;@href&apos;).extract()[0]</div><div class="line">                        print(type(key.xpath(&apos;text()&apos;).extract()[0]))</div><div class="line">                        # item[&apos;category&apos;] = key.xpath(&apos;text()&apos;).extract()[0]</div><div class="line">                    except Exception as e:</div><div class="line">                        print(e)</div><div class="line">                    yield item</div></pre></td></tr></table></figure>
<h5 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h5><p>parse回调方法中会大量用到xpath语法。掌握下规则应该就能轻易上手。还有Chrome在检查下,见下图骚操作:</p>
<p><img src="/images/xpath.png" alt="xpath"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了scrapy项目的几个基本文件的职责，下面文章会用一个例子来实际应用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt; Scrapy的项目结构介绍 &lt;/center&gt;

&lt;h3 id=&quot;创建scrapy爬虫项目&quot;&gt;&lt;a href=&quot;#创建scrapy爬虫项目&quot; class=&quot;headerlink&quot; title=&quot;创建scrapy爬虫项目&quot;&gt;&lt;/a&gt;创建scrapy爬虫项目&lt;/h3
    
    </summary>
    
      <category term="爬虫" scheme="http://www.smallstrong.site/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://www.smallstrong.site/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy的安装</title>
    <link href="http://www.smallstrong.site/2018/01/22/Scrapy%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://www.smallstrong.site/2018/01/22/Scrapy的安装/</id>
    <published>2018-01-22T03:31:53.000Z</published>
    <updated>2018-09-27T17:31:54.125Z</updated>
    
    <content type="html"><![CDATA[<center> Scrapy的安装 </center>


<h3 id="安装-mac创建python3虚拟环境"><a href="#安装-mac创建python3虚拟环境" class="headerlink" title="安装 mac创建python3虚拟环境"></a>安装 mac创建python3虚拟环境</h3><p><a href="http://blog.csdn.net/qq_17280559/article/details/70242906" target="_blank" rel="external">链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">virtualenv -p python3 venv3</div><div class="line">source venv3/bin/activate</div></pre></td></tr></table></figure></p>
<h3 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h3><p><a href="https://www.jianshu.com/p/95414dc6659b" target="_blank" rel="external">链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo pip install lxml</div><div class="line">sudo pip install scrapy</div><div class="line">sudo pip install --upgrade pyopenssl</div></pre></td></tr></table></figure></p>
<h3 id="pycharm中设置virtualenv的虚拟环境为开发环境"><a href="#pycharm中设置virtualenv的虚拟环境为开发环境" class="headerlink" title="pycharm中设置virtualenv的虚拟环境为开发环境"></a>pycharm中设置virtualenv的虚拟环境为开发环境</h3><p><a href="http://blog.csdn.net/wukong616/article/details/52196580" target="_blank" rel="external">链接</a></p>
<h3 id="创建一个Scrapy项目"><a href="#创建一个Scrapy项目" class="headerlink" title="创建一个Scrapy项目"></a>创建一个Scrapy项目</h3><blockquote>
<p>下面是我电脑的路径，在桌面spider目录下创建scrapy爬虫项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /Users/smallstrong/Desktop/spider #到爬虫目录</div><div class="line">scrapy startproject zhuque # 创建爬虫项目朱雀</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单介绍了scrapy的环境安装，接下来会介绍scrapy项目的总体架构和原理，并会伴随一个项目来实践。</p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt; Scrapy的安装 &lt;/center&gt;


&lt;h3 id=&quot;安装-mac创建python3虚拟环境&quot;&gt;&lt;a href=&quot;#安装-mac创建python3虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;安装 mac创建python3虚拟环境&quot;&gt;&lt;/
    
    </summary>
    
      <category term="爬虫" scheme="http://www.smallstrong.site/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://www.smallstrong.site/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>我对docker的浅薄理解</title>
    <link href="http://www.smallstrong.site/2017/10/25/%E3%80%90Devops%E3%80%91%E6%88%91%E5%AF%B9docker%E7%9A%84%E6%B5%85%E8%96%84%E7%90%86%E8%A7%A3/"/>
    <id>http://www.smallstrong.site/2017/10/25/【Devops】我对docker的浅薄理解/</id>
    <published>2017-10-25T06:37:44.000Z</published>
    <updated>2018-09-27T01:19:54.089Z</updated>
    
    <content type="html"><![CDATA[<center>我对docker的浅薄理解</center>


<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h3 id="what-is-docker"><a href="#what-is-docker" class="headerlink" title="what is docker?"></a>what is docker?</h3><blockquote>
<p>docker这货就是个可以装很多容器的新型虚拟机。一个容器就是一个进程，这货做到了容器间的文件系统网络等的隔离。容器里能装镜像，这个镜像呢，至少里面是个最精简的Linux系统。你可以在别人的镜像上搞点小动作然后搞出来之后这个新的镜像就是你的了。</p>
</blockquote>
<h3 id="Why-we-choose-docker"><a href="#Why-we-choose-docker" class="headerlink" title="Why we choose docker ?"></a>Why we choose docker ?</h3><ol>
<li>利用系统资源能力极高。同配置下传统虚拟机你开10个试试，但这货可以还远不止且打开速度极快。</li>
<li>docker最后生成的就是一个Image,这个image里面包含了环境，你可以理解成连着生产环境一块儿交付。任何平台，只需配置一次，随处跑。真正做到write once,run everywhere，不像某N。</li>
</ol>
<h3 id="How-docker-works"><a href="#How-docker-works" class="headerlink" title="How docker works?"></a>How docker works?</h3><ol>
<li>你的先下载docker，并安装。</li>
<li>为了更好管理你的镜像，你需要DockerToolbox，可以直接从镜像仓库下载官方镜像（dockerhub）</li>
<li>考虑到天朝的网络，你或许需要一个代理。<br><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">https://www.daocloud.io/mirror#accelerator-doc</a></li>
<li>下载好你要的镜像之后，start一下，看看人家是怎么玩的。Nginx+tornado可以玩转py后端，Jenkins轻松持续集成,jekyll随随便便搞个blog玩玩</li>
<li>不过这终究是别人家的镜像，我自己怎么做镜像呢？恩，接下来我们来站在巨人的肩膀上学习（<del>装逼</del>）</li>
</ol>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><blockquote>
<p>Dockerfile这货是啥？这货是个脚本，用来构建docker镜像。<br>桌面temp路径下demo演示以及具体参数讲解<br>导出来看看你到底搞的是个啥玩意 docker export tomcat</p>
</blockquote>
<h3 id="Learn-docker（todo）"><a href="#Learn-docker（todo）" class="headerlink" title="Learn docker（todo）"></a>Learn docker（todo）</h3><ol>
<li>数据管理</li>
<li>容器互联</li>
<li>网路配置<br>等等</li>
</ol>
<blockquote>
<p>这货很吊,实乃居家旅行之装逼利器。</p>
</blockquote>
<h1 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h1><ol>
<li>docker info:列出docker基本信息,所有容器和镜像的情况</li>
<li>docker run –name jenkins -i -t jenkins /bin/bash 创建一个容器叫Jenkins进入Jenkins容器并打开容器内的shell</li>
<li>exit可以切换回自己的电脑用户</li>
<li>docker ps -a 查看当前系统中容器的列表</li>
<li>docker  inspect 31f4b6b20718（容器名字）查看容器具体信息</li>
<li>docker rm 31f4b6b20718(容器名字) 干翻这个容器</li>
<li>docker images 列出镜像</li>
<li>docker build –no-cache 根据Dockerfile来构建镜像（可指定无缓存，因为docker每执行成功一条指令会缓存一个新容器）</li>
<li>docker history tomcat 可以查看tomcat这镜像build历史构建过程 这货到底经历了什么</li>
<li>cat tomcat.tar | sudo docker import - yourname/tomcat 导入容器</li>
<li>docker stop dockername  停止这个容器</li>
</ol>
<p>上面的内容写于三月前，记得那晚搞到一两点，为了整理还写了ppt，结果说是周五的技术分享会还被放鸽子，绝壁是醉了。链接就下边这个。<br><a href="https://github.com/smallstrong0/docker-ppt" target="_blank" rel="external">https://github.com/smallstrong0/docker-ppt</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;我对docker的浅薄理解&lt;/center&gt;


&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;h3 id=&quot;what-is-docker&quot;&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://www.smallstrong.site/categories/Devops/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx+uWSGI+supervisor+flask项目部署</title>
    <link href="http://www.smallstrong.site/2017/10/24/nginx-uWSGI-supervisor-flask%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.smallstrong.site/2017/10/24/nginx-uWSGI-supervisor-flask项目部署/</id>
    <published>2017-10-24T01:08:22.000Z</published>
    <updated>2018-09-27T17:31:08.127Z</updated>
    
    <content type="html"><![CDATA[<center>nginx+uWSGI+supervisor+flask项目部署</center>


<h2 id="nginx-uWSGI-Flask-Supervisor部署项目"><a href="#nginx-uWSGI-Flask-Supervisor部署项目" class="headerlink" title="nginx+uWSGI+Flask+Supervisor部署项目"></a>nginx+uWSGI+Flask+Supervisor部署项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OS version: Ubuntu 16.04.2</div><div class="line">nginx version: nginx/1.10.3 (Ubuntu)</div><div class="line">uWSGI version: uWSGI (2.0.15)</div><div class="line">Flask version: Flask (0.12.2)</div><div class="line">Supervisor version: Supervisor(3.2.0)</div></pre></td></tr></table></figure>
<h3 id="nginx-配置-新建文件-etc-nginx-conf-d-xxx-conf-xxx-conf-中xxx你来定"><a href="#nginx-配置-新建文件-etc-nginx-conf-d-xxx-conf-xxx-conf-中xxx你来定" class="headerlink" title="nginx 配置 新建文件 /etc/nginx/conf.d/xxx.conf  xxx.conf 中xxx你来定"></a>nginx 配置 新建文件 /etc/nginx/conf.d/xxx.conf  xxx.conf 中xxx你来定</h3><p>删除/etc/nginx/sites-enabled/ 以及 /etc/nginx/sites-available/ 下所有文件<br>你可以这么玩，sudo rm -f /etc/nginx/sites-enabled/default<br>为什么这么做呢？<br>先看nginx.conf里面有：<br>include /etc/nginx/conf.d/<em>.conf;<br>include /etc/nginx/sites-enabled/</em>;<br>而sites-enabled里面也有default这种文件,我这么做的原因是删了看着干净。以后做扩展找起来也好找，都在conf.d目录下。</p>
<p>极简配置<br>客户端访问80端口,有Nginx接受到请求，并下发到服务器6001端口进行处理，6001端口会部署一个uWSGIweb服务器.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">      listen  80;</div><div class="line">      server_name www.smallstrong.site; #公网地址</div><div class="line"></div><div class="line">      location / &#123;</div><div class="line">        include      uwsgi_params;</div><div class="line">        uwsgi_pass   127.0.0.1:6001;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Nginx常用的几个命令：<br>sudo service nginx start<br>sudo service nginx stop<br>sudo service nginx restart</p>
<h3 id="pip全局安装virtualenv在自己项目根目录新建一个独立的Python环境"><a href="#pip全局安装virtualenv在自己项目根目录新建一个独立的Python环境" class="headerlink" title="pip全局安装virtualenv在自己项目根目录新建一个独立的Python环境"></a>pip全局安装virtualenv在自己项目根目录新建一个独立的Python环境</h3><ol>
<li>pip install virtualenv</li>
<li>cd 到你项目根目录</li>
<li>virtualenv api_env</li>
<li>source api_env/bin/activate (deactivate 可退出)</li>
<li>接下来pip来安装自己需要的Python库,Flask,uWSGI等（依赖问题自行解决）</li>
</ol>
<p><img src="/images/py_env.png" alt="py_env.png"></p>
<h4 id="接下来写一个最简单的Flask应用"><a href="#接下来写一个最简单的Flask应用" class="headerlink" title="接下来写一个最简单的Flask应用"></a>接下来写一个最简单的Flask应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/env python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from flask import Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">whale_apis = &#123;</div><div class="line">    &apos;test&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@app.route(&apos;/api/&lt;func&gt;&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def go(func):</div><div class="line">    exec &apos;import fe.&apos; + func</div><div class="line">    data = eval(&apos;fe.&apos; + func + &apos;.go()&apos;)</div><div class="line">    return data</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(debug=True)</div></pre></td></tr></table></figure>
<p>上面的代码是我的flask网络框架的主入口，路由是/api/方法名称，默认接受GET 和 POST请求，动态导入工程目录下fe目录下的同方法名文件，执行go方法并返还数据。fe目录是所有网络请求目录，后续在剖析Flask应用会详细介绍。</p>
<h4 id="写好Flask入口之后，写一个uWSGI服务器的配置文件"><a href="#写好Flask入口之后，写一个uWSGI服务器的配置文件" class="headerlink" title="写好Flask入口之后，写一个uWSGI服务器的配置文件"></a>写好Flask入口之后，写一个uWSGI服务器的配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line"></div><div class="line"># uwsgi 启动时所使用的地址与端口</div><div class="line">socket = 127.0.0.1:6001</div><div class="line"></div><div class="line">module = manage:app</div><div class="line"></div><div class="line"># 处理器数</div><div class="line">processes = 4</div><div class="line"></div><div class="line"># 线程数</div><div class="line">threads = 2</div><div class="line"></div><div class="line">req-logger = file:/home/small/logs/req.log</div><div class="line"></div><div class="line">logger = file:/home/small/logs/err.log</div></pre></td></tr></table></figure>
<p>放在项目根目录下，取名叫uwsgi.ini<br>这时候 命令行输入 uwsgi uwsgi.ini 即开启了uWSGI服务器。</p>
<h3 id="Supervisor安装管理uwsgi进程"><a href="#Supervisor安装管理uwsgi进程" class="headerlink" title="Supervisor安装管理uwsgi进程"></a>Supervisor安装管理uwsgi进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[program:whale_api]</div><div class="line">command=/home/small/whale/whale_api/api_env/bin/uwsgi  /home/small/whale/whale_api/uwsgi.ini</div><div class="line"></div><div class="line">directory=/home/small/whale/whale_api</div><div class="line">user=root</div><div class="line"></div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">startretries=3</div><div class="line">stdout_logfile=/home/small/logs/supervisor_out.log</div><div class="line">stderr_logfile=/home/small/logs/supervisor_err.log</div></pre></td></tr></table></figure>
<p>默认生成的配置文件里面会有一部分要修改，包括日志输出位置。<br>serverurl=unix:///var/run/supervisor.sock找不到原因是你杀死supervisord进程重新开或是权限不足，反正这块坑还是比较多的</p>
<p>启动supervisor<br>sudo supervisord -c supervisord.conf<br>管理常用指令：<br>sudo supervisorctl shutdown //会关闭supervisor进程和其管理的子进程<br>sudo supervisorctl status //查看现在运行的supervisor进程的状态<br>sudo supervisorctl start<br>sudo supervisorctl stop<br>sudo supervisorctl restart</p>
<p>昨晚的结果就是：</p>
<p><img src="/images/py_bushu.png" alt="py_bushu.png"></p>
<blockquote>
<p>这只是万里长征第一步。写下这些命令也只是方便日后出问题了来查阅，不至于很闷逼。相信还有很多未知的问题在等待这我，等我踩完会继续在文章中填上。下班回家！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;nginx+uWSGI+supervisor+flask项目部署&lt;/center&gt;


&lt;h2 id=&quot;nginx-uWSGI-Flask-Supervisor部署项目&quot;&gt;&lt;a href=&quot;#nginx-uWSGI-Flask-Supervisor部署项目&quot; cl
    
    </summary>
    
      <category term="Devops" scheme="http://www.smallstrong.site/categories/Devops/"/>
    
    
  </entry>
  
  <entry>
    <title>ssh方式登录服务器</title>
    <link href="http://www.smallstrong.site/2017/10/12/ssh%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.smallstrong.site/2017/10/12/ssh方式登录服务器/</id>
    <published>2017-10-12T01:32:38.000Z</published>
    <updated>2018-09-27T17:32:57.020Z</updated>
    
    <content type="html"><![CDATA[<center>ssh方式登录获取服务器shell窗口</center>

<h3 id="购买好阿里云服务器之后，首先第一步就是ssh方式登录获取服务器shell窗口。"><a href="#购买好阿里云服务器之后，首先第一步就是ssh方式登录获取服务器shell窗口。" class="headerlink" title="购买好阿里云服务器之后，首先第一步就是ssh方式登录获取服务器shell窗口。"></a>购买好阿里云服务器之后，首先第一步就是ssh方式登录获取服务器shell窗口。</h3><p>步骤：</p>
<ol>
<li><p>服务器安装ssh (root用户登录,OpenSSH的主配置文件：/etc/ssh/sshd_config)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install openssh-server -y</div></pre></td></tr></table></figure>
</li>
<li><p>添加用户日常登录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">adduser username</div><div class="line">passwd username</div><div class="line">usermod -aG wheel username (将该用户添加到wheel组获得sudo权限)</div><div class="line">sudo su root (用户切换)</div></pre></td></tr></table></figure>
</li>
<li><p>登录阿里云控制台,开放出22端口用于ssh连接<br> 云服务器ECS –&gt; 安全组 –&gt; 配置规则 –&gt; 快速创建规则(开放出22,80,443端口)<br> tip:完成第三步后，一般我会购买一个域名解析到这台服务器，这样ssh登录时候就不用输入这台服务器的IP地址了，直接输入域名就好了。</p>
</li>
<li>mac端ssh登录<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh username@IP address</div><div class="line">or</div><div class="line">ssh smallstrong@smallstrong.site</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>tips<br>     可以在用户目录下创建 /.ssh/authorized_keys文件 添加你的ssh公钥到该文件。该文件的访问权限为600 （sudo chmod 600 authorized_keys）<br>这样你的电脑通过ssh登录服务器就省去了输入该用户密码的操作。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;ssh方式登录获取服务器shell窗口&lt;/center&gt;

&lt;h3 id=&quot;购买好阿里云服务器之后，首先第一步就是ssh方式登录获取服务器shell窗口。&quot;&gt;&lt;a href=&quot;#购买好阿里云服务器之后，首先第一步就是ssh方式登录获取服务器shell窗口。&quot; cl
    
    </summary>
    
      <category term="Devops" scheme="http://www.smallstrong.site/categories/Devops/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈服务器自动升级部署</title>
    <link href="http://www.smallstrong.site/2017/09/21/%E3%80%90Devops%E3%80%91%E6%B5%85%E8%B0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E5%8D%87%E7%BA%A7%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.smallstrong.site/2017/09/21/【Devops】浅谈服务器自动升级部署/</id>
    <published>2017-09-21T02:36:33.000Z</published>
    <updated>2018-09-27T01:18:03.012Z</updated>
    
    <content type="html"><![CDATA[<center>揭秘一行代码完成千台服务器自动升级部署</center>


<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><blockquote>
<p>服务器利用crontab定时任务去每分钟跑一个shell脚本,shell脚本的任务是打开服务器项目目录，pull 一下www分支下的代码。ok,自动化部署完成。而触发这个事件，你需要键入的一行代码就是将本地www分支上的代码push到远程www分支即可。</p>
</blockquote>
<p>正常开发流程可能会有dev,test,stage,www四个环境。<br>dev环境是开发环境,test测试环境,stage预发布环境这三个环境分为一类,称为线下环境。另一类就是线上环境了。</p>
<p>首先，在git上先为各个环境拉出对应分支。dev,test,stage,www四条环境分支。我们小伙伴开发在master分支上,当需要对接口的时候，我们切换到dev分支merge掉master分支。然后将本地的dev分支推送到远程的dev分支上去。此时，crontab定时器跑任务时候，会把远程dev分支的更新pull下来。而pull下来的代码此刻就完成了服务器代码的更新部署操作。同样的姿势,你可以在test及stage环境下操作。</p>
<p>但是，线下操作与线上操作不能同样对待。毕竟上线代码不是每个小程序员都有的权力。可以在push到远程www分支时候设置权限，每一个pr都要主管同意才能push成功，从而达到安全性的把关。</p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;揭秘一行代码完成千台服务器自动升级部署&lt;/center&gt;


&lt;h3 id=&quot;核心思想&quot;&gt;&lt;a href=&quot;#核心思想&quot; class=&quot;headerlink&quot; title=&quot;核心思想&quot;&gt;&lt;/a&gt;核心思想&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;服务器利用cront
    
    </summary>
    
      <category term="Devops" scheme="http://www.smallstrong.site/categories/Devops/"/>
    
    
  </entry>
  
  <entry>
    <title>python 时间处理类积累</title>
    <link href="http://www.smallstrong.site/2017/09/11/python-%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E7%B1%BB%E7%A7%AF%E7%B4%AF/"/>
    <id>http://www.smallstrong.site/2017/09/11/python-时间处理类积累/</id>
    <published>2017-09-11T01:10:59.000Z</published>
    <updated>2017-09-11T01:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<center>python 时间处理类整理</center>

<h3 id="直接贴码，下附链接"><a href="#直接贴码，下附链接" class="headerlink" title="直接贴码，下附链接"></a>直接贴码，下附链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/env python</div><div class="line"># -*- coding: utf8 -*-</div><div class="line"></div><div class="line">import os</div><div class="line">import sys</div><div class="line">import time</div><div class="line">import datetime</div><div class="line">import json</div><div class="line">import random</div><div class="line">import hashlib</div><div class="line">import math</div><div class="line">import HTMLParser</div><div class="line">import calendar</div><div class="line">import string</div><div class="line"></div><div class="line"></div><div class="line">def get_ts():</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :return: 获取当前时间轴</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    return long(time.time())</div><div class="line"></div><div class="line"></div><div class="line">def get_ms():</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :return: 获取当前时间轴 毫秒值</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    return long(time.time() * 1000)</div><div class="line"></div><div class="line"></div><div class="line">def day2ts(day):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param date: 2017-09-09</div><div class="line">    :return: 时间轴</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    return time.mktime(time.strptime(day, &apos;%Y-%m-%d&apos;))</div><div class="line"></div><div class="line"></div><div class="line">def day_cn2ts(day):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param date: 2017年09月09日</div><div class="line">    :return: 时间轴</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    return time.mktime(time.strptime(day, &apos;%Y年%m月%d日&apos;))</div><div class="line"></div><div class="line"></div><div class="line">def time2ts(time):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param time:  2017-09-09 11:11:11</div><div class="line">    :return: 时间轴</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    return time.mktime(time.strptime(time, &apos;%Y-%m-%d %H:%M:%S&apos;))</div><div class="line"></div><div class="line"></div><div class="line">def time_cn2ts(time):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param time:  2017年09月09日 11:11:11</div><div class="line">    :return: 时间轴</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    return time.mktime(time.strptime(time, &apos;%Y年%m月%d日 %H:%M:%S&apos;))</div><div class="line"></div><div class="line"></div><div class="line">def get_month(ts=None):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param ts: 时间轴</div><div class="line">    :return: 获取时间轴月份</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if ts is None:</div><div class="line">        ts = get_ts()</div><div class="line">    return time.strftime(&apos;%Y-%m&apos;, time.localtime(ts))</div><div class="line"></div><div class="line"></div><div class="line">def get_month_cn(ts=None):</div><div class="line">    if ts is None:</div><div class="line">        ts = get_ts()</div><div class="line">    return time.strftime(&apos;%Y年%m日&apos;, time.localtime(ts))</div><div class="line"></div><div class="line"></div><div class="line">def get_day(ts=None):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param ts: 时间轴</div><div class="line">    :return: 返回时间轴对应的日子</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if ts is None:</div><div class="line">        ts = get_ts()</div><div class="line">    return time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(ts))</div><div class="line"></div><div class="line"></div><div class="line">def get_day_cn(ts=None):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param ts: 时间轴</div><div class="line">    :return: 返回时间轴对应的日子 中文</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if ts is None:</div><div class="line">        ts = get_ts()</div><div class="line">    return time.strftime(&apos;%Y年%m月%d日&apos;, time.localtime(ts))</div><div class="line"></div><div class="line"></div><div class="line">def get_time(ts=None):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param ts: 时间轴</div><div class="line">    :return: 返回 %Y-%m-%d %H:%M:%S</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if ts is None:</div><div class="line">        ts = get_ts()</div><div class="line">    return time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(ts))</div><div class="line"></div><div class="line"></div><div class="line">def get_time_cn(ts=None):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param ts: 时间轴</div><div class="line">    :return: 返回 %Y年%m月%d日 %H:%M:%S</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if ts is None:</div><div class="line">        ts = get_ts()</div><div class="line">    return time.strftime(&apos;%Y年%m月%d日 %H:%M:%S&apos;, time.localtime(ts))</div><div class="line"></div><div class="line"></div><div class="line">def get_week_num():</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    获取今天的星期</div><div class="line">    :return: 0~6,0-&gt;Sunday</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    l_time = time.localtime()</div><div class="line">    return int(time.strftime(&apos;%w&apos;, l_time))</div><div class="line"></div><div class="line"></div><div class="line">def get_today_zero_time(now=time.time()):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param now: 时间轴</div><div class="line">    :return: 传入时间轴当天的零点时间轴</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    midnight = now - (now % 86400) + time.timezone</div><div class="line">    return long(midnight)</div><div class="line"></div><div class="line"></div><div class="line">def get_last_month(date=None):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param date: 时间轴</div><div class="line">    :return: 当前时间轴 上月  ——&gt; 2017-08</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if not date:</div><div class="line">        date = get_day()</div><div class="line">    date_list = date.split(&apos;-&apos;)</div><div class="line">    if int(date_list[1]) == 1:</div><div class="line">        return &apos;&#123;&#125;-12&apos;.format(int(date_list[0]) - 1)</div><div class="line"></div><div class="line">    return &apos;&#123;&#125;-&#123;&#125;&apos;.format(date_list[0], str(int(date_list[1]) - 1).zfill(2))</div><div class="line"></div><div class="line"></div><div class="line">def get_week_first_day(ts=None):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param ts: 时间轴</div><div class="line">    :return: 当前时间轴本周的日期2017-09-04</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if not ts:</div><div class="line">        ts = get_ts()</div><div class="line">    day = get_day(ts)</div><div class="line">    time_list = day.split(&apos;-&apos;)</div><div class="line">    week = calendar.weekday(int(time_list[0]), int(time_list[1]), int(time_list[2]))</div><div class="line">    week_first_day = get_day(ts - week * 86400)</div><div class="line">    return week_first_day</div><div class="line"></div><div class="line"></div><div class="line">def get_week_first_timestamp(ts=None):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param ts: 得到该时间轴 这周星期一起始时间轴</div><div class="line">    :return:</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    a = &apos;&#123;&#125; 00:00:01&apos;.format(get_week_first_day(ts))</div><div class="line">    s = time.mktime(time.strptime(a, &apos;%Y-%m-%d %H:%M:%S&apos;))</div><div class="line">    return long(s)</div><div class="line"></div><div class="line"></div><div class="line">def d_value_day(ts, now_ts=get_ts()):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param ts: 之前的时间轴</div><div class="line">    :param now_ts: 现在的时间轴</div><div class="line">    :return: 相差天数</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    d1 = get_day(ts)</div><div class="line">    d2 = get_day(now_ts)</div><div class="line">    date_list1 = d1.split(&apos;-&apos;)</div><div class="line">    date_list2 = d2.split(&apos;-&apos;)</div><div class="line">    d1 = datetime.datetime(int(date_list1[0]), int(date_list1[1]), int(date_list1[2]))</div><div class="line">    d2 = datetime.datetime(int(date_list2[0]), int(date_list2[1]), int(date_list2[2]))</div><div class="line">    return (d2 - d1).days</div><div class="line"></div><div class="line"></div><div class="line">def get_weekenk_time(ctime, ts):</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    :param ctime:</div><div class="line">    :param ts:</div><div class="line">    :return: 输出ctime所在周截止到ts 的周末时间</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    saturday_start_stamp, sunday_end_time = get_weekenk_full_stamp(ctime)</div><div class="line">    if ctime &lt;= saturday_start_stamp:</div><div class="line">        if ts &lt;= sunday_end_time and ts &gt; saturday_start_stamp:</div><div class="line">            return ts - saturday_start_stamp</div><div class="line">        elif ts &lt;= saturday_start_stamp:</div><div class="line">            return 0</div><div class="line">        else:</div><div class="line">            return 86400 * 2</div><div class="line">    else:</div><div class="line">        if ts &lt;= sunday_end_time:</div><div class="line">            return ts - ctime</div><div class="line">        else:</div><div class="line">            return sunday_end_time - ctime</div><div class="line"></div><div class="line"></div><div class="line">def get_weekenk_full_stamp(ctime):</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    :param ctime: 传入 一个时间轴</div><div class="line">    :return:   输出 这个时间轴对应的这个周的周末的 起始时间自 和结束时间轴</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    str = time.strftime(&quot;%Y-%m-%d&quot;, time.localtime(ctime))</div><div class="line">    c_start_stamp = long(time.mktime(time.strptime(str, &apos;%Y-%m-%d&apos;)))</div><div class="line"></div><div class="line">    day = time.localtime(ctime).tm_wday</div><div class="line">    if day == 5:</div><div class="line">        return c_start_stamp, c_start_stamp + 86400 * 2 -1</div><div class="line">    elif day == 6:</div><div class="line">        return c_start_stamp - 86400, c_start_stamp + 86400 -1</div><div class="line">    else:</div><div class="line">        saturday_start_stamp = (5 - day) * 86400 + c_start_stamp</div><div class="line">        return saturday_start_stamp, saturday_start_stamp + 86400 * 2 -1</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    print get_ts()</div><div class="line">    print get_ms()</div><div class="line">    print get_day(get_ts())</div><div class="line">    print get_day_cn(get_ts())</div><div class="line">    print get_week_num()</div><div class="line">    print get_today_zero_time()</div><div class="line">    print get_last_month()</div><div class="line">    print get_week_first_day()</div><div class="line">    print get_weekenk_full_stamp(get_ts())</div></pre></td></tr></table></figure>
<h3 id="获取地址"><a href="#获取地址" class="headerlink" title="获取地址"></a>获取地址</h3><p><a href="https://github.com/smallstrong0/py_time" target="_blank" rel="external">https://github.com/smallstrong0/py_time</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;python 时间处理类整理&lt;/center&gt;

&lt;h3 id=&quot;直接贴码，下附链接&quot;&gt;&lt;a href=&quot;#直接贴码，下附链接&quot; class=&quot;headerlink&quot; title=&quot;直接贴码，下附链接&quot;&gt;&lt;/a&gt;直接贴码，下附链接&lt;/h3&gt;&lt;figure clas
    
    </summary>
    
    
      <category term="python" scheme="http://www.smallstrong.site/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Mac上用Jenkins自动化打包Android应用</title>
    <link href="http://www.smallstrong.site/2017/08/03/Mac%E4%B8%8A%E7%94%A8Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85Android%E5%BA%94%E7%94%A8/"/>
    <id>http://www.smallstrong.site/2017/08/03/Mac上用Jenkins自动化打包Android应用/</id>
    <published>2017-08-03T01:12:16.000Z</published>
    <updated>2018-09-27T01:47:14.910Z</updated>
    
    <content type="html"><![CDATA[<center> Mac下 Jenkins 持续集成 之Android自动化打包发包</center>


<h3 id="总结下Jenkins在Mac电脑上自动化打包Android应用遇到的一些小问题"><a href="#总结下Jenkins在Mac电脑上自动化打包Android应用遇到的一些小问题" class="headerlink" title="总结下Jenkins在Mac电脑上自动化打包Android应用遇到的一些小问题"></a>总结下Jenkins在Mac电脑上自动化打包Android应用遇到的一些小问题</h3><blockquote>
<p>最深刻的一点就是，Jenkins安装完成后，其实你电脑会自动添加一个Jenkins用户，目录在/Users/Shared/Jenkins下，你接下来遇到的绝大多数问题无非是该用户无权限访问你本机的Android sdk啊，你本机用户无法去查看Jenkins用户下的文件之类的。所以这次我玩的姿势是在命令行直接切换成root用户 命令行输入 sudo su root以及密码,省去无权限问题。另外根据你在玩的实际情况，改变你要访问路径的权限即可，暴力虽不优雅chmod 777 (your file or dir)。ls -al 可以查看当前目录下所有文件 包括隐藏文件以及这些文件所对应用户的权限，防身技能要记住。记住以上几点我们就来开始装逼之旅。</p>
</blockquote>
<h3 id="三步走"><a href="#三步走" class="headerlink" title="三步走"></a>三步走</h3><h4 id="1-git配置好，把代码拉下来。（Jenkins配置Java路径等所有配置路径问题基本都是用户权限问题，不多概述，当然前提你路径得写对）"><a href="#1-git配置好，把代码拉下来。（Jenkins配置Java路径等所有配置路径问题基本都是用户权限问题，不多概述，当然前提你路径得写对）" class="headerlink" title="1.git配置好，把代码拉下来。（Jenkins配置Java路径等所有配置路径问题基本都是用户权限问题，不多概述，当然前提你路径得写对）"></a>1.git配置好，把代码拉下来。（Jenkins配置Java路径等所有配置路径问题基本都是用户权限问题，不多概述，当然前提你路径得写对）</h4><h4 id="2-Use-Gradle-Wrapper构建项目（问题最多）"><a href="#2-Use-Gradle-Wrapper构建项目（问题最多）" class="headerlink" title="2.Use Gradle Wrapper构建项目（问题最多）"></a>2.Use Gradle Wrapper构建项目（问题最多）</h4><h4 id="3-配置fir来上传应用"><a href="#3-配置fir来上传应用" class="headerlink" title="3.配置fir来上传应用"></a>3.配置fir来上传应用</h4><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><ol>
<li><p>mac用户在安装好Jenkins遇到的第一个错误就是文件夹中文件权限问题。你以你本机用户去访问Jenkins用户目录下是没有读写权限的。下面就是你要的answer。意思就是说该目录你以原来mac默认创建的用户是没有权限去查看的，你必须添加mac下自己的用户并开放读写权限。good luck!<br>/Users/Shared/Jenkins/Home/secrets/initialAdminPassword<br><a href="https://stackoverflow.com/questions/37146063/how-do-i-get-initial-admin-password-for-jenkins-on-mac" target="_blank" rel="external">https://stackoverflow.com/questions/37146063/how-do-i-get-initial-admin-password-for-jenkins-on-mac</a></p>
</li>
<li><p>git ssh登陆老报错。(https的直接跳)<br>cd /Users/smallstrong/.ssh （smallstrong是我用户名不是你的这目录如果没有自己先去ssh生成吧不多说了）里面是你ssh的公钥私钥，把里面所有文件复制到/Users/Shared/Jenkins/.ssh目录下，在你配置源码管理的时候我的用户名字是Jenkins然后ssh选择 From the Jenkins master ~/.ssh即可。</p>
</li>
<li><p>如果你在构建环节选择Use Gradle Wrapper，那么他会自动去下载你依赖的gradle包，速度之慢欲仙欲死。我是直接把本地的/Users/smallstrong/.gradle/wrapper/dists/目录下我干两年Android来下的所有gradle,哈哈啥版本都有直接copy。把要下载的gradle版本copy到/Users/Shared/Jenkins/Home/workspace/Android/wrapper/dists(其中我的项目名字叫Android)目录下即可。</p>
</li>
</ol>
<p>4.有些时候我们git上没有local.properties文件，会报找不到sdk目录问题。在里面我路径是这样子的ndk.dir=/Users/smallstrong/Library/Android/sdk/ndk-bundle<br>sdk.dir=/Users/smallstrong/Library/Android/sdk，记住改变该目录以及上级上上级目录的访问权限，不然这货读取不到又报错。</p>
<p>5.当你进入到这一步的时候，往下走就是正常的gradle编译打包过程，我们签名key不放在服务器所以我本地copy一份放在了根目录，你们的我不知道。根据报错玩吧。</p>
<h3 id="任何意想不到的问题欢迎留言，我刚弄完还算熟，兴许会给你带来帮助。"><a href="#任何意想不到的问题欢迎留言，我刚弄完还算熟，兴许会给你带来帮助。" class="headerlink" title="任何意想不到的问题欢迎留言，我刚弄完还算熟，兴许会给你带来帮助。"></a>任何意想不到的问题欢迎留言，我刚弄完还算熟，兴许会给你带来帮助。</h3><blockquote>
<p>因为之前在Google云服务上已经折腾过一回且试用将近一月稳定高效，所以这次在本机mac上做这件事感觉在捏菜（因为本机电脑命令行敲起来不卡贼快，配ssh登陆服务器做这些事情，不说了先哭一会儿）。现在的我即将踏上Python后端取经之路，跨端玩想想都刺激。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt; Mac下 Jenkins 持续集成 之Android自动化打包发包&lt;/center&gt;


&lt;h3 id=&quot;总结下Jenkins在Mac电脑上自动化打包Android应用遇到的一些小问题&quot;&gt;&lt;a href=&quot;#总结下Jenkins在Mac电脑上自动化打包Andro
    
    </summary>
    
      <category term="Devops" scheme="http://www.smallstrong.site/categories/Devops/"/>
    
    
  </entry>
  
  <entry>
    <title>Shadowsocks 全端翻墙</title>
    <link href="http://www.smallstrong.site/2017/07/23/Shadowsocks-%E5%85%A8%E7%AB%AF%E7%BF%BB%E5%A2%99/"/>
    <id>http://www.smallstrong.site/2017/07/23/Shadowsocks-全端翻墙/</id>
    <published>2017-07-23T13:48:28.000Z</published>
    <updated>2018-09-27T17:35:08.834Z</updated>
    
    <content type="html"><![CDATA[<p><center>Shadowsocks 全端翻墙</center></p>
<h3 id="开篇先来点逼格的。"><a href="#开篇先来点逼格的。" class="headerlink" title="开篇先来点逼格的。"></a>开篇先来点逼格的。</h3><blockquote>
<p>I spend many ways to break the GFW,and this is my destination.</p>
</blockquote>
<h3 id="Shadowsocks-全端翻墙"><a href="#Shadowsocks-全端翻墙" class="headerlink" title="Shadowsocks 全端翻墙"></a>Shadowsocks 全端翻墙</h3><h5 id="对比国内众翻墙姿势，种类奇多但多数不够优雅。免费VPN流量的限制及其难以忍受的不稳定性（某灯频繁验证），付费VPN死于政策因素卷款跑路的层出不穷（green，佛跳墙），网上免费ss六小时改一次ip地址，告诉我你能忍？"><a href="#对比国内众翻墙姿势，种类奇多但多数不够优雅。免费VPN流量的限制及其难以忍受的不稳定性（某灯频繁验证），付费VPN死于政策因素卷款跑路的层出不穷（green，佛跳墙），网上免费ss六小时改一次ip地址，告诉我你能忍？" class="headerlink" title="对比国内众翻墙姿势，种类奇多但多数不够优雅。免费VPN流量的限制及其难以忍受的不稳定性（某灯频繁验证），付费VPN死于政策因素卷款跑路的层出不穷（green，佛跳墙），网上免费ss六小时改一次ip地址，告诉我你能忍？"></a>对比国内众翻墙姿势，种类奇多但多数不够优雅。免费VPN流量的限制及其难以忍受的不稳定性（某灯频繁验证），付费VPN死于政策因素卷款跑路的层出不穷（green，佛跳墙），网上免费ss六小时改一次ip地址，告诉我你能忍？</h5><blockquote>
<p>why shadowsocks?  </p>
</blockquote>
<ol>
<li>该服务全天免费提供，高速稳定，无流量限制。</li>
<li>该服务一个账号，win、mac、iphone、android、ipad全端翻墙。</li>
<li>该服务搭在我的Google云服务器上，数据的安全性有保证。</li>
</ol>
<h4 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">服务器地址： 104.128.91.246</div><div class="line">服务器端口： 443</div><div class="line">数据加密方式： aes-256-cfb</div><div class="line">密码： MTg2MjBjYT</div><div class="line">代理端口： 1080（optional ，up on you）</div></pre></td></tr></table></figure>
<ol>
<li>打开对于设备的客户端，输入上述信息。</li>
<li>启动代理。</li>
</ol>
<blockquote>
<p>Any question:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">qq: 393019766</div><div class="line">wechat: smallstrong0</div><div class="line">e-mail: smallstrong007@gmail.com</div><div class="line">blog: smallstrong.wang</div></pre></td></tr></table></figure>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/smallstrong0/ss" target="_blank" rel="external">https://github.com/smallstrong0/ss</a></p>
<h3 id="github上提供的客户端我在-我的mac-win10-ihpnoe-以及Android设备上都是完美运行的，有小伙伴翻译win7系统对应的客户端无法使用，应该是版本兼容问题-github上我已经上传了对应win7的版本，如果有问题留言沟通。"><a href="#github上提供的客户端我在-我的mac-win10-ihpnoe-以及Android设备上都是完美运行的，有小伙伴翻译win7系统对应的客户端无法使用，应该是版本兼容问题-github上我已经上传了对应win7的版本，如果有问题留言沟通。" class="headerlink" title="github上提供的客户端我在 我的mac win10 ihpnoe 以及Android设备上都是完美运行的，有小伙伴翻译win7系统对应的客户端无法使用，应该是版本兼容问题,github上我已经上传了对应win7的版本，如果有问题留言沟通。"></a>github上提供的客户端我在 我的mac win10 ihpnoe 以及Android设备上都是完美运行的，有小伙伴翻译win7系统对应的客户端无法使用，应该是版本兼容问题,github上我已经上传了对应win7的版本，如果有问题留言沟通。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;Shadowsocks 全端翻墙&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&quot;开篇先来点逼格的。&quot;&gt;&lt;a href=&quot;#开篇先来点逼格的。&quot; class=&quot;headerlink&quot; title=&quot;开篇先来点逼格的。&quot;&gt;&lt;/a&gt;开篇先来点逼格的。&lt;/h3&gt;&lt;blo
    
    </summary>
    
      <category term="科学上网" scheme="http://www.smallstrong.site/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
  </entry>
  
  <entry>
    <title>在google cloud 上搭建Jenkins持续集成实现Android应用的自动打包</title>
    <link href="http://www.smallstrong.site/2017/07/23/%E3%80%90Devops%E3%80%91%E5%9C%A8google-cloud-%E4%B8%8A%E6%90%AD%E5%BB%BAJenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%AE%9E%E7%8E%B0Android%E5%BA%94%E7%94%A8%E7%9A%84%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/"/>
    <id>http://www.smallstrong.site/2017/07/23/【Devops】在google-cloud-上搭建Jenkins持续集成实现Android应用的自动打包/</id>
    <published>2017-07-23T07:06:42.000Z</published>
    <updated>2018-09-27T01:44:38.886Z</updated>
    
    <content type="html"><![CDATA[<center>服务器 Jenkins 持续集成 之Android自动化打包发包</center>

<blockquote>
<p>本篇单纯为了做记录，最基本条件就是你需要全程翻墙，而且你需要一台配置不是最低的VPS。</p>
<p>偶然间在小伙伴的桌上看到了一本APP研发录，兴起就花了一下午看了一下。书里讲的东西都非常切合实际开发情景。当读到第八章自动打包的时候，觉得这个事情可以搞一波。</p>
<p>对比实际开发中，当提测时候经常遇到ui 测试找你说这个bug啥啥的，有些其实已经修复了只是没有更新包。碰巧那会儿你正(<del>和妹子聊得开心</del>）认真工作。看着旁边测试妹子还站着呢，你怎忍心？没办法，停下来，花个N分钟只是为了装个包。。。只是为了装个包。。。只是为了装个包？那还需要我亲自动手，服务器来做不就行了。</p>
</blockquote>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>一台VPS服务器（由于Android用gradle打包的过程是一个十分吃系统资源的活，公司的应用配置在双核 13g内存的情况下打包完成是4分钟）</li>
<li>Google cloud有由Bitnami提供的一套包含Jenkins 及一些其必要的插件包括，及其他必要环境的方案。我在下面会贴图。（你可以理解使用这套方案，你这台VPS会默认安装Debian操作系统，里面已经拥有了Jenkins的一些必要环境已经插件，而且这台Debian系统的VPS，已经预装了Java环境，gradle环境，以及git环境）</li>
<li>上面两步一句话概括就是你在一台VPS上有了个Jenkins的CI系统，默认80端口就能访问。那接下来的任务就是我们要这台Debian系统的服务器拥有打包Android应用功能的环境。前面说到Java环境已经有了，gradle环境已经有了，要实现版本控制的git环境已经有了，那就还缺Android sdk环境了。想到，我们SDK只需要提供编译打包的功能，所以只需要下载SDK tools即可。命令行官网自行下载，方法自己去找（偷偷告诉你，Google自家云服务器下载这个tools速度惊人）</li>
<li>当准备好所有Android打包需要的环境之后，在Jenkins创建项目，配置好相应环境的目录。这些网上很多，不过我相信每个人遇到的问题都会有所不同，我在文章最后会说说我掉进的一些深坑。配置好环境之后，我是每隔两分钟检查git库是否有更新有更新就打包，最后我会将生成好的debug包上传至fir进行分发。测试和UI同学直接扫码下载安装。解放双手值得拥有。</li>
</ol>
<h3 id="我掉进的一些深坑"><a href="#我掉进的一些深坑" class="headerlink" title="我掉进的一些深坑"></a>我掉进的一些深坑</h3><ol>
<li>由于对Linux系统的不熟悉，加上用ssh远程登录操作服务器真的很卡。这第一个坑就是，用户权限导致了我服务器配置的正确的ssh，然而我公司的git服务器压根儿连不上。当时真的把我搞懵逼了。解决方案是创建一个Jenkins用户，修改你创建的Jenkins项目的目录权限。这里你要掌握Debian系统下自由切换root及其他用户。</li>
<li>在填写构建项目的时候，一定选择Use Gradle Wrapper，Make gradlew executable要勾上Force GRADLE_USER_HOME to use workspace    也勾上。这样他会自己去下载gradle。</li>
<li>VPS配置不能低，双核10g内存我觉得是底配。不然编译打包过程出个gradle need more memory之类的服务器就躺了。</li>
<li>另外一些，包括Android编译时候需要统一license，Android SDK的路径是写在local.properties里面的。路径写正确了。还有各种环境配置的目录基本都在/opt/bitnami/下面。部分Jenkins插件也需要安装。反正缺啥补啥，看报错定位，用Google来解决问题，遇到问题先不慌，已经有这么多人搞好了，说明那种掉下去爬不上的天坑肯定是没有的，你也可以的。</li>
</ol>
<h3 id="一些我参考的链接-希望对你也有帮助"><a href="#一些我参考的链接-希望对你也有帮助" class="headerlink" title="一些我参考的链接 希望对你也有帮助"></a>一些我参考的链接 希望对你也有帮助</h3><p><a href="http://www.vogella.com/tutorials/JenkinsAndroid/article.html#android_jenkinsbuild_installation" target="_blank" rel="external">http://www.vogella.com/tutorials/JenkinsAndroid/article.html#android_jenkinsbuild_installation</a></p>
<p><a href="http://jaycechant.info/2017/Android-sdk-on-Linux-for-Jenkins-etc/" target="_blank" rel="external">http://jaycechant.info/2017/Android-sdk-on-Linux-for-Jenkins-etc/</a></p>
<p><a href="https://stackoverflow.com/questions/39760172/you-have-not-accepted-the-license-agreements-of-the-following-sdk-components" target="_blank" rel="external">https://stackoverflow.com/questions/39760172/you-have-not-accepted-the-license-agreements-of-the-following-sdk-components</a></p>
<h3 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h3><p>这本是运维该干的事情，但是你既然已经有了一颗(<del>装逼</del>)瞎折腾的心就别半途而废。我在我mac本 已经 公司的win本上在本地都事先成功打包过自己github上的一些小demo。都成功了，但是换了Debian系统的服务器还是会遇到各种层出不穷的问题，关键就是不放弃。我算算在第一次成功打出包之前我至少有50次失败的经历。</p>
<p>这个打包服务已经正常稳定的工作两星期了，的确方便了不少。至少省下来和女票正常交流的时间哈哈。如果你遇到任何这方面的问题，欢迎留言交流。</p>
<h3 id="打包记录"><a href="#打包记录" class="headerlink" title="打包记录"></a>打包记录</h3><p><img src="http://upload-images.jianshu.io/upload_images/1321838-5e952fcca9a44753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-07-23 下午4.30.07.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;服务器 Jenkins 持续集成 之Android自动化打包发包&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;本篇单纯为了做记录，最基本条件就是你需要全程翻墙，而且你需要一台配置不是最低的VPS。&lt;/p&gt;
&lt;p&gt;偶然间在小伙伴的桌上看到了一本APP研发录，
    
    </summary>
    
      <category term="Devops" scheme="http://www.smallstrong.site/categories/Devops/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式之访问者模式</title>
    <link href="http://www.smallstrong.site/2017/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.smallstrong.site/2017/05/16/设计模式之访问者模式/</id>
    <published>2017-05-16T06:27:55.000Z</published>
    <updated>2017-05-16T07:58:48.000Z</updated>
    
    <content type="html"><![CDATA[<center>设计模式之访问者模式</center>

<blockquote>
<p>访问者模式<br>例子以公司招聘查看简历为背景</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1321838-b864a2960f721b4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="访问者模式UML.png"></p>
<pre><code>interface Visitor{
    void visitClerical(Clerical clerical);//查看文员简历
    void visitCoder(Coder coder);//查看程序员简历
}     
</code></pre><blockquote>
<p>访问者接口，分别对ElementA与ElementB进行访问</p>
</blockquote>
<pre><code>class HRVisitor{
    public void visitClerical(Clerical clerical){
        //HR关注文员简历XXXXX
    }

    public void visitCoder(Coder coder){
        //HR看码农简历，看经验看学校
    }
}
</code></pre><blockquote>
<p>HR访问者</p>
</blockquote>
<pre><code>class CTOVisitor{
    public void visitClerical(Clerical clerical){
        //CTO不关心文员简历，可是是空实现
    }

    public void visitCoder(Coder coder){
        //CTO看码农简历，看项目 看技能
    }
}
</code></pre><blockquote>
<p>CTO访问者</p>
</blockquote>
<pre><code>abstract class JobSeeker{
    public String name;
    public String school;
    public String skill;

    public JobSeeker(String name ,String school ,String skill){
        this.name = name;
        this.school = school;
        this.skill = skill;
    }

    public abstract void accept(Visitor visitor);
}
</code></pre><blockquote>
<p>抽象求职者类    </p>
</blockquote>
<pre><code>class Clerical extends JobSeeker{
    public Clerical(String name ,String school ,String skill){
        super(name , school , skill);
    }
    public void accept(Visitor visitor){
        visitor.visitClerical(this);
    }
}
</code></pre><blockquote>
<p>文员求职者    </p>
</blockquote>
<pre><code>class Coder extends JobSeeker{
    public Coder(String name ,String school ,String skill){
        super(name , school , skill);
    }
    public void accept(Visitor visitor){
        visitor.visitCoder(this);
    }
}
</code></pre><blockquote>
<p>码农求职者</p>
</blockquote>
<pre><code>public class JobStructure{
    List&lt;JobSeeker&gt; list = new ArrayList&lt;&gt;();

    public void seeResume(Visitor visitor){
        for(JobSeeker jobSeeker : list){
            jobSeeker.accept(visitor);
        }
    }

    public void addJobSeeker(JobSeeker jobSeeker){
        list.add(jobSeeker);
    }
}    
</code></pre><blockquote>
<p>查阅简历类</p>
</blockquote>
<pre><code>class CLient{
    public static void main(String[] args){
        JobStructure jobStructure = new JobStructure();
        jobStructure.addJobSeeker(new Coder(&quot;小强&quot;,&quot;清华&quot;,&quot;Android&quot;));
        jobStructure.addJobSeeker(new Coder(&quot;小民&quot;,&quot;北大&quot;,&quot;Word&quot;));
        jobStructure.seeResume(new CTOVisitor());
        jobStructure.seeResume(new HRVisitor());
    }
}    
</code></pre><blockquote>
<p>客户端类，收集简历，CTO查看简历，HR查看简历</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;设计模式之访问者模式&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;访问者模式&lt;br&gt;例子以公司招聘查看简历为背景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_i
    
    </summary>
    
      <category term="设计模式" scheme="http://www.smallstrong.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
</feed>
